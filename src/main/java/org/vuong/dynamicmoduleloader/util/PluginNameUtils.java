package org.vuong.dynamicmoduleloader.util;

/**
 * Utility class for plugin name operations.
 * 
 * This class provides static methods for generating consistent plugin names
 * from class names and performing name validation.
 * 
 * @author Dynamic Module Loader
 * @since 0.0.1-SNAPSHOT
 */
public final class PluginNameUtils {

    /**
     * Private constructor to prevent instantiation of utility class.
     */
    private PluginNameUtils() {
        throw new UnsupportedOperationException("Utility class cannot be instantiated");
    }

    /**
     * Generates a plugin name from a class name.
     * 
     * The plugin name is generated by converting the first character of the
     * class name to lowercase, following Java naming conventions for variables.
     * 
     * @param className the class name to convert
     * @return the generated plugin name
     * @throws IllegalArgumentException if className is null or empty
     */
    public static String generatePluginName(String className) {
        if (className == null || className.trim().isEmpty()) {
            throw new IllegalArgumentException("Class name cannot be null or empty");
        }
        
        String trimmed = className.trim();
        if (trimmed.length() == 1) {
            return trimmed.toLowerCase();
        }
        
        return Character.toLowerCase(trimmed.charAt(0)) + trimmed.substring(1);
    }

    /**
     * Validates a plugin name.
     * 
     * A valid plugin name must:
     * - Not be null or empty
     * - Not contain whitespace
     * - Start with a letter or underscore
     * - Contain only letters, digits, and underscores
     * 
     * @param pluginName the plugin name to validate
     * @return true if the plugin name is valid, false otherwise
     */
    public static boolean isValidPluginName(String pluginName) {
        if (pluginName == null || pluginName.trim().isEmpty()) {
            return false;
        }
        
        String trimmed = pluginName.trim();
        if (!trimmed.equals(pluginName)) {
            return false; // Contains leading/trailing whitespace
        }
        
        if (!Character.isLetter(trimmed.charAt(0)) && trimmed.charAt(0) != '_') {
            return false; // Must start with letter or underscore
        }
        
        for (int i = 1; i < trimmed.length(); i++) {
            char c = trimmed.charAt(i);
            if (!Character.isLetterOrDigit(c) && c != '_') {
                return false; // Must contain only letters, digits, and underscores
            }
        }
        
        return true;
    }
}
